import java.util.*;

public class Main {
    public static void main(String[] args) {
        GraphMatrix g = new GraphMatrix(6); 

        g.addEdge(0, 1, 4);
        g.addEdge(0, 2, 2);
        g.addEdge(1, 2, 5);
        g.addEdge(1, 3, 10); 
        g.addEdge(2, 4, 3);  
        g.addEdge(3, 4, 4);  
        g.addEdge(3, 5, 11); 
        g.addEdge(4, 5, 5);  

        g.dijkstra(0);
    }
}

class GraphMatrix {
    private int[][] adjMatrix;
    private int V;
    private char[] labels = {'A', 'B', 'C', 'D', 'E', 'F'};

    public GraphMatrix(int vertices) {
        this.V = vertices;
        adjMatrix = new int[V][V];

        for (int i = 0; i < V; i++)
            Arrays.fill(adjMatrix[i], 0);
    }

    public void addEdge(int src, int dest, int weight) {
        adjMatrix[src][dest] = weight;
        adjMatrix[dest][src] = weight; 
    }

  
    public void dijkstra(int start) {
        int[] dist = new int[V];       
        boolean[] visited = new boolean[V]; 

        Arrays.fill(dist, Integer.MAX_VALUE); 
        dist[start] = 0;

        for (int count = 0; count < V - 1; count++) {
            int u = minDistance(dist, visited);
            visited[u] = true;

            for (int v = 0; v < V; v++) {
                if (!visited[v] && adjMatrix[u][v] != 0 &&
                    dist[u] + adjMatrix[u][v] < dist[v]) {
                    dist[v] = dist[u] + adjMatrix[u][v];
                }
            }
        }

        printSolution(dist, start);
    }
    private int minDistance(int[] dist, boolean[] visited) {
        int min = Integer.MAX_VALUE, minIndex = -1;

        for (int v = 0; v < V; v++) {
            if (!visited[v] && dist[v] < min) {
                min = dist[v];
                minIndex = v;
            }
        }

        return minIndex;
    }
    private void printSolution(int[] dist, int start) {
        System.out.println("Shortest distances from " + labels[start] + ":");
        for (int i = 0; i < V; i++) {
            System.out.println(labels[start] + " â†’ " + labels[i] + " = " + dist[i]);
        }
    }
}

