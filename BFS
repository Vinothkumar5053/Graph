import java.util.*;

public class Main {
    public static void main(String[] args) {
        GraphMatrix g = new GraphMatrix(6); 

        
        g.addEdge(0, 1); 
        g.addEdge(0, 2); 
        g.addEdge(1, 2); 
        g.addEdge(1, 3); 
        g.addEdge(2, 4);
        g.addEdge(3, 4);
        g.addEdge(3, 5); 
        g.addEdge(4, 5); 

        System.out.println("BFS from node A:");
        g.bfs(0); 
    }
}

class GraphMatrix {
    private int[][] adjMatrix;
    private int V;
    private char[] labels = {'A', 'B', 'C', 'D', 'E', 'F'};

    public GraphMatrix(int vertices) {
        this.V = vertices;
        adjMatrix = new int[V][V];
    }

    public void addEdge(int src, int dest) {
        adjMatrix[src][dest] = 1;
        adjMatrix[dest][src] = 1;
    }

    
    public void bfs(int start) {
        boolean[] visited = new boolean[V];
        Queue<Integer> queue = new LinkedList<>();

        visited[start] = true;
        queue.add(start);

        while (!queue.isEmpty()) {
            int node = queue.poll();
            System.out.print(labels[node] + " ");

            for (int i = 0; i < V; i++) {
                if (adjMatrix[node][i] == 1 && !visited[i]) {
                    visited[i] = true;
                    queue.add(i);
                }
            }
        }
    }
}
